doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title
            | Form
        body
            form(id='1')
                input(type='text' name='imie')
                button(type='submit' value='apiGet') ApiGET
            
            form(id='2')
                input(type='text' name='imie')
                button(type='submit' value='apiPost') ApiPOST
            
            form(id='3')
                input(type='text' name='imie')
                button(type='submit' value='ajaxGet') AjaxGet
            
            form(id='4')
                input(type='text' name='imie')
                button(type='submit' value='ajaxGet') AjaxPOST

        script.
            const form1 = document.getElementById('1');
            form1.addEventListener('submit',apiGet);

            const form2 = document.getElementById('2');
            form2.addEventListener('submit',apiPost);

            const form3 = document.getElementById('3');
            form3.addEventListener('submit',ajaxGet);

            const form4 = document.getElementById('4');
            form4.addEventListener('submit',ajaxPost);

            function apiGet(event){
                event.preventDefault();
                const form = document.getElementById('1');
                const name = form.elements.imie.value;
                const url = `http://localhost:3000/submit?imie=${encodeURI(name)}`;

                fetch(url)
                    .then(response => response.text())
                    .then(text => {
                        window.alert(text);
                    });
            }

            function apiPost(event){
                event.preventDefault();
                const form = document.getElementById('2');
                const name = form.elements.imie.value;
                const data = { imie: name };

                fetch('/submit', {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {
                    'Content-Type': 'application/json'
                }
                })
                    .then(response => response.text())
                    .then(text => {
                        window.alert(text);
                    });
            }

            function ajaxGet(event){
                event.preventDefault();
                const form = document.getElementById('3');

                const name = form.elements.imie.value;

                const xhr = new XMLHttpRequest();

                xhr.addEventListener("load", function(e){
                    if(xhr.status == 200){
                        window.alert(xhr.response);
                    };
                });

                xhr.open('GET', `/submit?imie=${encodeURI(name)}`, true);
                xhr.send();
            }

            function ajaxPost(event){
                event.preventDefault();
                const form = document.getElementById('4');
                const name = form.elements.imie.value;

                const xhr = new XMLHttpRequest();

                xhr.addEventListener("load", function (e) {
                    if (xhr.status === 200) {
                        window.alert(xhr.response);
                    }

                xhr.open('POST', '/submit', true);
                xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
                xhr.send(`imie=${encodeURI(name)}`);
                });
            }
            /****************************************************************************/
            /* Function that performs (asynchronous) query to the web server using AJAX */
            /****************************************************************************/
            function requestAJAX() {
                //-----------------------------------------------
                // Create an object representing the request to the web server — see https://developer.mozilla.org/docs/Web/API/XMLHttpRequest
                //-----------------------------------------------
                const xhr = new XMLHttpRequest();

                //-----------------------
                // Observers registration
                //-----------------------

                // If the request was successful
                xhr.addEventListener("load", function (evt) {
                    if (xhr.status === 200) {
                        window.alert(xhr.response);
                        console.log(xhr.response);
                    }
                });

                // If the request failed
                xhr.addEventListener("error", function (evt) {
                    window.alert('There was a problem with this request.');
                });

                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------

                //****************************************************************
                // Type of data received by the 'load' observer - default - 'text'
                //****************************************************************
                // Uncomment one of the lines below
                //*********************************
                // xhr.responseType ='json';
                // xhr.responseType ='document';

                xhr.open('GET', '/submit', true);

                //****************************************************************************************
                // What is the acceptable data type - the server part should return data of the given type
                // Default value: '*/*'
                //****************************************************************************************
                // Uncomment one of the lines below
                //*********************************
                // xhr.setRequestHeader('Accept', 'application/json');
                // xhr.setRequestHeader('Accept', 'application/xml');

                xhr.send(null);
            }

            /*********************************************************************************/
            /* Function that performs (asynchronous) query to the web server using Fetch API */
            /*********************************************************************************/
            //- function requestFetchAPI() {
            //-     fetch('/submit', {
            //-         headers: {
            //-             //****************************************************************************************
            //-             // What is the acceptable data type - the server part should return data of the given type
            //-             // Default value: '*/*'
            //-             //****************************************************************************************
            //-             // Uncomment one of the lines below
            //-             //*********************************
            //-             //- 'Accept': 'application/json'
            //-             //-  'Accept': 'application/xml'
            //-         }
            //-     }) // Execution of the (asynchronous) query to the web server — a promise is created
            //-     .then(function (response) { // if the promise is fulfilled
            //-         if (!response.ok)
            //-             throw Error(response.statusText);
            //-         if (response.headers.get("Content-Type") !== 'application/json') {
            //-             // If the received data is plain text or an XML document
            //-             const result = response.text();
            //-             window.alert(result); // show the Promise object
            //-             console.log(result);
            //-         }
            //-         else {
            //-             //If the received data is a JSON document
            //-             const result = response.json();
            //-             window.alert(result.welcome); // show the Promise object
            //-             console.log(result);
            //-         }
            //-     })
            //-     .catch(function (error) { // if the promise is rejected
            //-         window.alert(error);
            //-     });
            //- }

            /***********************************************/
            /* Same as above but using 'async' and 'await' */
            /***********************************************/
            
            async function requestFetchAPI() {
                try {
                    response = await fetch('/submit', {
                        headers: {
                            'Accept': 'application/json'
                            //- 'Accept': 'application/xml'
                        }
                    }); // Execution of the (asynchronous) query to the web server — a promise is created

                    // If the promise is fulfilled, then 'response' has a value
                    if (!response.ok)
                        throw Error(response.statusText);
                    if (response.headers.get("Content-Type") !== 'application/json') {
                        // If the received data is plain text or an XML document
                        const result = await response.json();
                        window.alert(result.welcome); // show the Promise object
                        console.log(result.welcome);
                    }
                    else {
                        //If the received data is a JSON document
                        const result = response.json();
                        window.alert(result); // show the Promise object
                        console.log(result);
                    }
                }
                catch (error) { // if the promise is rejected
                    window.alert(error);
                }
            }
            

    body
        main
            form(method='get' action='/submit')
                label
                    | Perform a query to the web server with the
                    strong GET
                    |  method
                input(type='submit' value='Without using AJAX or Fetch API')
                input(type='button' value='Using AJAX' onclick='requestAJAX()')
                input(type='button' value='Using Fetch API' onclick='requestFetchAPI()')